@startuml
enum GameMode {
+ SINGLE = 0
+ PVP = 1
+ PVE = 2
}
class Game {
- hallOfFameStoragePath : str
- helpFilePath : str
- initialTiles : list
- rows : int
- columns : int
- tileSize : int
- centerGameOnScreen : bool
- startGameX : int
- startGameY : int
- basicHp : int
- basicAttack : int
- numberOfRandomMines : int
- timeAfterWhichMinesHide : int
- firstTankSpawnIndex : int
- secondTankSpawnIndex : int
- enemyTanksSpawnIndexes : list
- firstTankControls : dict
- secondTankControls : dict
- enableBonuses : bool
- uniqueBonuses : bool
- bonusSpawningFrequency : int
- maxNumberOfBonuses : int
- tiles : list
- tileColors : dict
- gameWidth : int
- gameHeight : int
- helpContent : str
- mapTurtle : Turtle
- messageTurtle : Turtle
- minesTurtle : Turtle
- gameRunning : bool
- gamePaused : bool
- roundCounter : int
- gameMode : GameMode
- gameRound : int
- firstTank : Tank
- secondTank : Tank
- enemyTanks : list
- occupiedTilesByEnemies : dict
- allTanks : list
- bullets : list
- bonuses : list
- tankCentralization : int
- tankSpeedValue : int
- controls1 : dict
- controls2 : dict
- laserShootSound : Sound
- railgunSound : Sound
- explosionSound : Sound
- damageSound : Sound
- gameOverSound : Sound
- victorySound : Sound
  + assignSettingsFromFile(settingsFile)
  + getTilePosition(index)
  + getTileIndexFromPoint(point)
  + getNeighbors(index, validationFunction)
  + valid(point)
  + replaceBordersWithTeleport()
  + spawnRandomMines()
  + resetGame(setupWidth, setupHeight, setupXPosition, setupYPosition)
  + startGame()
  + roundOfMovement()
  + checkIfGameOver()
  + endGame(victory, announcement)
  + tanksCollision(tankChecking, tankCheckingPosition, collisionThreshold)
  + togglePause()
  + toggleHelpMenu()
  + showStartMenu()
  + showGameModeMenu()
  + setGameMode(mode)
  + showHelpMenu(modalWidth, modalHeight)
  + initHallOfFame(victory)
  + showHallOfFame(modalWidth, modalHeight)
  + loadHallOfFame()
  + saveToHallOfFame(name, score)
}
class Tank {
- game : Game
- position : vector
- speed : vector
- tankSpeedValue : int
- speedRatio : int
- direction : int
- tankColor : str
- tankId : int
- moveControls : dict
- stoppingControl : str
- shootingControl : str
- keysPressed : dict
- hp : int
- maxHp : int
- attack : int
- defaultAttack : int
- tankTurtle : Turtle
- hpTurtle : Turtle
- reloadTurtle : Turtle
- bonusDisplayTurtle : Turtle
- reloadingTime : int
- reloadingRemainingTime : int
- loaded : bool
- destroyed : bool
- deathReason : str
- activeBonuses : dict
- indestructible : bool
- railgunOn : bool
  + delete()
  + change(tankSpeedDirection, angle)
  + moveTank(wantMove)
  + teleportToMiddleTile()
  + setControls()
  + keyPressHandler(key)
  + tankMovement()
  + shoot()
  + updateReload()
  + takeDamage(amount, reason)
}
enum Tile {
+ NO_TILE = 0
+ ROAD = 1
+ RIVER = 2
+ FOREST = 3
+ INDESTRUCTIBLE_BLOCK = 4
+ DESTRUCTIBLE_BLOCK = 5
+ DESTROYED_DESTRUCTIBLE_BLOCK = 6
+ MINE = 7
+ TELEPORT = 8
}
class File {
  + loadFileAsArray(filename, errorMessage)
  + parseControls(controlString)
  + loadSettingsAndMapFromFile(filePath)
}
class Draw {
  + startDrawing(turtleObject, x, y, fillColor, circuitColor, pensize)
  + endDrawing(turtleObject)
  + drawSquare(turtleObject, x, y, size, squareColor, circuitColor)
  + drawRectangle(turtleObject, x, y, rectangleWidth, rectangleHeight, fillColor, borderColor, startDrawingFromMiddle, borderThickness)
  + drawCircle(turtleObject, x, y, circleSize, circleColor)
  + drawHearth(turtleObject, x, y, size, fillColor, circuitColor)
  + drawStar(turtleObject, x, y, size, fillColor, circuitColor)
  + drawSingleChevron(turtleObject, x, y, size, fillColor, circuitColor)
  + drawChevronPattern(turtleObject, x, y, size, spaceBetweenChevrons, numberOfChevrons, fillColor, circuitColor)
  + drawSkull(turtleObject, x, y, squareSize, skullColor, eyesColor)
  + drawShield(turtleObject, x, y, squareSize, outerShieldColor, innerShieldColor)
  + drawSandglass(turtleObject, x, y, squareSize, glassColor, sandColor)
  + drawLightning(turtleObject, x, y, t, fillColor, circuitColor)
  + drawTriangle(turtleObject, x, y, sideSize, trianglePointedUp, fillColor, circuitColor)
  + drawPortal(turtleObject, x, y, portalSize, numberOfLayers, portalColor, backgroundColor)
  + drawBoard(game)
  + drawExplosion(game, x, y, drawingTurtle, explosionIteration, maxIterations)
  + drawModalMessage(game, message, subMessage, x, y, modalWidth, modalHeight)
  + drawHP(tank, hpColor, bgColor)
  + drawReloadBar(tank, reloadColor, bgColor)
  + drawTank(tank)
}
class Bullet {
- position : vector
- direction : int
- bulletSpeed : int
- shooter : Tank
- bulletTurtle : Turtle
  + moveBullet()
  + checkBulletHit(game, bullet)
  + processBulletsMovementsAndCollisions(game)
}
enum BonusType {
+ HEALTH = 1
+ RELOAD = 2
+ REGENERATION = 3
+ SHIELD = 4
+ ATTACK = 5
+ SPEED = 6
+ RAILGUN = 7
+ ALL = 8
}
class Bonus {
- game : Game
- bonusType : BonusType
- position : vector
- bonusTurtle : Turtle
  + drawBonus()
  + spawnBonus(game)
  + tankIsOnBonus(tank, bonus, tileSize)
  + tankBonusOverlap(tankParameters, bonusParameters)
  + activateBonus(tank, bonusType, amountTime)
  + updateActiveBonuses(tank)
  + deactivateBonus(tank, bonusType)
  + displayActiveBonuses(tank)
}
class AITank {
- target : Tank
- path : list
- stuckRounds : int
- hpBeforeStuck : int
  + delete()
  + decideTarget()
  + isCollidingWithOtherTank(nextTiles)
  + isValidPointForBot(point)
  + isValidIndexForBot(index)
  + findPath(startIndex, endIndex)
  + tryAppointNewPath()
  + simpleDirectionToBeCloserToTarget()
  + updateDirectionPath()
  + getTilesInRange(point, tankRange)
  + getStuckTankOut()
  + moveTank(wantMove)
  + shootIfNeighborTileIsDestructible()
  + decideToShoot()
  + hasLineOfSight(targetPosition)
}
Game "1" *-- "*" Tank
Game "1" *-- "*" Bullet
Game "1" *-- "*" Bonus
Game "1" *-- "1" GameMode
Tank --> Game
Tank <|-- AITank
Tank "1" o-- "*" BonusType
Bullet --> Tank
Bonus --> Game
Bonus "1" o-- "*" BonusType
Tile <.. Game
Tile <.. Draw
File <.. Game
Utils <.. Game
Draw <.. Game
Draw <.. Tank
Utils <.. Draw
@enduml